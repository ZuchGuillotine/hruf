import Header from "@/components/header";
import Footer from "@/components/footer";
import LabUpload from "@/components/lab-upload";
import React, { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText, Download, Trash2, ArrowLeft, TrendingUp, Activity } from "lucide-react";
import { Link } from "wouter";
import { useLocation } from 'wouter';
import { BiomarkerFilter } from "@/components/BiomarkerFilter";
import { BiomarkerHistoryChart } from "@/components/BiomarkerHistoryChart";
import { useLabChartData } from "@/hooks/use-lab-chart-data";
import type { Series } from "@/types/chart";

interface LabFile {
  id: number;
  fileName: string;
  fileType: string;
  fileUrl: string;
  uploadedAt: string;
}

export default function Labs() {
  const [labFiles, setLabFiles] = useState<LabFile[]>([]);
  const { data: chartData, isLoading: chartLoading, error: chartError } = useLabChartData();
  const [location] = useLocation();
  const [isDeleting, setIsDeleting] = useState<number | null>(null);

  // Extract selected biomarkers from URL
  const selectedBiomarkers = useMemo(() => {
    const searchParams = new URLSearchParams(window.location.search);
    const biomarkersParam = searchParams.get('biomarkers');
    if (!biomarkersParam) return new Set<string>();
    return new Set(biomarkersParam.split(',').filter(Boolean));
  }, [location]);

  // Get chart series data for selected biomarkers
  const chartSeries = useMemo(() => {
    if (!chartData?.series || selectedBiomarkers.size === 0) {
      return [];
    }
    
    return chartData.series.filter(series => 
      selectedBiomarkers.has(series.name)
    );
  }, [chartData?.series, selectedBiomarkers]);

  const fetchLabFiles = async () => {
    try {
      const response = await fetch('/api/labs', {
        credentials: 'include'
      });
      if (response.ok) {
        const data = await response.json();
        setLabFiles(data);
      } else {
        console.error('Failed to fetch lab files:', response.statusText);
      }
    } catch (error) {
      console.error('Failed to fetch lab files:', error);
    }
  };

  useEffect(() => {
    fetchLabFiles();
  }, []);

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this lab result?')) {
      return;
    }

    setIsDeleting(id);
    try {
      const response = await fetch(`/api/labs/${id}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      if (response.ok) {
        setLabFiles(prev => prev.filter(file => file.id !== id));
      } else {
        console.error('Failed to delete lab file');
      }
    } catch (error) {
      console.error('Error deleting lab file:', error);
    } finally {
      setIsDeleting(null);
    }
  };

  const handleUploadSuccess = () => {
    fetchLabFiles();
    // Optionally refetch chart data
    window.location.reload();
  };

  return (
    <div className="min-h-screen flex flex-col bg-[#e8f3e8]">
      <Header />
      <main className="container mx-auto px-4 py-6 space-y-6 flex-grow">
        {/* Biomarker Trends Section */}
        <div className="bg-[#1b4332] rounded-lg p-6">
          <div className="flex items-center gap-3 mb-6">
            <TrendingUp className="h-8 w-8 text-white" />
            <h2 className="text-3xl font-bold text-white">Biomarker Trends</h2>
          </div>
          
          {chartError && (
            <Card className="bg-red-50 border-red-200 mb-4">
              <CardContent className="p-4">
                <p className="text-red-700">Error loading chart data: {chartError.message}</p>
              </CardContent>
            </Card>
          )}
          
          {labFiles.length > 0 ? (
            <div className="space-y-4">
              {/* Chart Component */}
              <BiomarkerHistoryChart series={chartSeries} />
              
              {/* Filter Component */}
              <BiomarkerFilter />
              
              {/* Status Information */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                <Card className="bg-white/10 border-none">
                  <CardContent className="p-4 text-center">
                    <Activity className="h-8 w-8 text-white mx-auto mb-2" />
                    <p className="text-white/90 text-lg font-semibold">
                      {chartData?.allBiomarkers?.length || 0}
                    </p>
                    <p className="text-white/70 text-sm">Total Biomarkers</p>
                  </CardContent>
                </Card>
                
                <Card className="bg-white/10 border-none">
                  <CardContent className="p-4 text-center">
                    <FileText className="h-8 w-8 text-white mx-auto mb-2" />
                    <p className="text-white/90 text-lg font-semibold">
                      {labFiles.length}
                    </p>
                    <p className="text-white/70 text-sm">Lab Reports</p>
                  </CardContent>
                </Card>
                
                <Card className="bg-white/10 border-none">
                  <CardContent className="p-4 text-center">
                    <TrendingUp className="h-8 w-8 text-white mx-auto mb-2" />
                    <p className="text-white/90 text-lg font-semibold">
                      {selectedBiomarkers.size}
                    </p>
                    <p className="text-white/70 text-sm">Selected for Analysis</p>
                  </CardContent>
                </Card>
              </div>
            </div>
          ) : (
            <Card className="bg-white/10 border-none">
              <CardContent className="p-8 text-center">
                <FileText className="h-16 w-16 text-white/70 mx-auto mb-4" />
                <p className="text-white/90 text-xl font-semibold mb-2">
                  No lab results uploaded yet
                </p>
                <p className="text-white/70 text-lg">
                  Upload your first lab result to start tracking biomarker trends
                </p>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Lab Results Upload Section */}
        <div className="bg-[#1b4332] rounded-lg p-6">
          <h2 className="text-3xl font-bold text-white mb-6">Upload Lab Results</h2>
          <LabUpload onUploadSuccess={handleUploadSuccess} />
        </div>

        {/* Uploaded Files Section */}
        <div className="bg-[#1b4332] rounded-lg p-6">
          <h2 className="text-3xl font-bold text-white mb-6">Uploaded Files</h2>
          
          {labFiles.length === 0 ? (
            <Card className="bg-white/10 border-none">
              <CardContent className="p-8 text-center">
                <FileText className="h-12 w-12 text-white/70 mx-auto mb-4" />
                <p className="text-white/90 text-lg">No files uploaded yet</p>
                <p className="text-white/70">Upload your lab results above to get started</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {labFiles.map((file) => (
                <Card key={file.id} className="bg-white/10 border-none text-white">
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium truncate flex-1 mr-2">
                      {file.fileName}
                    </CardTitle>
                    <FileText className="h-4 w-4 text-white/70 flex-shrink-0" />
                  </CardHeader>
                  <CardContent>
                    <p className="text-xs text-white/70 mb-3">
                      Uploaded: {new Date(file.uploadedAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </p>
                    <div className="flex items-center gap-4">
                      <a
                        href={file.fileUrl}
                        download
                        className="flex items-center gap-2 text-sm text-white/90 hover:text-white transition-colors"
                      >
                        <Download className="h-4 w-4" />
                        Download
                      </a>
                      <button
                        onClick={() => handleDelete(file.id)}
                        disabled={isDeleting === file.id}
                        className="flex items-center gap-2 text-sm text-white/90 hover:text-red-300 disabled:opacity-50 transition-colors"
                      >
                        <Trash2 className="h-4 w-4" />
                        {isDeleting === file.id ? 'Deleting...' : 'Delete'}
                      </button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
        
        <Link to="/" className="flex items-center gap-2 text-black mt-6 ml-2 w-fit hover:text-gray-700 transition-colors">
          <ArrowLeft className="h-4 w-4" /> Back to Dashboard
        </Link>
      </main>
      <Footer />
    </div>
  );
}