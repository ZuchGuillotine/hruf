// Partial snippet to be added to server/routes.ts

// Modify the existing /api/supplement-logs/:date endpoint to work with our summarization approach
app.get("/api/supplement-logs/:date", requireAuth, async (req, res) => {
  try {
    const date = req.params.date;
    console.log('Fetching logs for date:', {
      requestDate: date,
      serverTime: new Date().toISOString()
    });

    // Convert the requested date to UTC day boundaries
    const startOfDay = new Date(`${date}T00:00:00.000Z`);
    const endOfDay = new Date(`${date}T23:59:59.999Z`);

    // In one query, fetch:
    // 1. Supplement logs for the requested date
    // 2. Qualitative logs for the date (excluding query-type logs)
    // 3. Any daily summaries for this date
    
    // First, get supplement logs for the date
    const logsResult = await db
      .select({
        id: supplementLogs.id,
        supplementId: supplementLogs.supplementId,
        takenAt: supplementLogs.takenAt,
        notes: supplementLogs.notes,
        effects: supplementLogs.effects,
        name: supplements.name,
        dosage: supplements.dosage,
        frequency: supplements.frequency
      })
      .from(supplementLogs)
      .leftJoin(supplements, eq(supplementLogs.supplementId, supplements.id))
      .where(
        and(
          eq(supplementLogs.userId, req.user!.id),
          sql`${supplementLogs.takenAt} >= ${startOfDay} AND ${supplementLogs.takenAt} <= ${endOfDay}`
        )
      )
      .orderBy(desc(supplementLogs.takenAt));

    // Get qualitative logs for the date
    const qualitativeLogsResult = await db
      .select({
        id: qualitativeLogs.id,
        content: qualitativeLogs.content,
        loggedAt: qualitativeLogs.loggedAt,
        type: qualitativeLogs.type,
        metadata: qualitativeLogs.metadata
      })
      .from(qualitativeLogs)
      .where(
        and(
          eq(qualitativeLogs.userId, req.user!.id),
          sql`${qualitativeLogs.loggedAt} >= ${startOfDay} AND ${qualitativeLogs.loggedAt} <= ${endOfDay}`,
          notInArray(qualitativeLogs.type, ['query'])
        )
      )
      .orderBy(desc(qualitativeLogs.loggedAt));

    // Get any summaries for this date
    const summariesResult = await db
      .select()
      .from(logSummaries)
      .where(
        and(
          eq(logSummaries.userId, req.user!.id),
          eq(logSummaries.summaryType, 'daily'),
          between(logSummaries.startDate, startOfDay, endOfDay)
        )
      )
      .limit(1);

    // Format logs while preserving original timestamps
    const enrichedLogs = logsResult.map(log => ({
      id: log.id,
      supplementId: log.supplementId,
      takenAt: log.takenAt.toISOString(),
      notes: log.notes,
      effects: log.effects,
      name: log.name || 'Unknown Supplement',
      dosage: log.dosage || '',
      frequency: log.frequency || ''
    }));

    const processedQualLogs = qualitativeLogsResult.map(log => {
      // Try to parse JSON content if it's a chat
      let summary = log.content;
      try {
        if (log.type === 'chat') {
          const messages = JSON.parse(log.content);
          if (Array.isArray(messages) && messages.length >= 2) {
            const userMsg = messages[0];
            const assistantMsg = messages[1];
            summary = `${req.user?.username || 'user'}: ${userMsg.content.slice(0, 50)}... | assistant: ${assistantMsg.content.slice(0, 100)}...`;
          } else if (Array.isArray(messages) && messages.length === 1) {
            const firstMessage = messages[0];
            summary = `${firstMessage.role === 'user' ? req.user?.username || 'user' : 'assistant'}: ${firstMessage.content.slice(0, 150)}...`;
          }
        }
      } catch (e) {
        // Not JSON or couldn't parse, use content as is
      }

      return {
        id: log.id,
        content: log.content,
        loggedAt: log.loggedAt.toISOString(),
        type: log.type,
        metadata: log.metadata,
        summary
      };
    });
    
    // Add the daily summary if available
    if (summariesResult.length > 0) {
      const summary = summariesResult[0];
      
      // Add the summary as a special qualitative log entry
      processedQualLogs.unshift({
        id: -summary.id, // Negative ID to indicate it's a summary
        content: summary.content,
        loggedAt: summary.createdAt.toISOString(),
        type: 'summary',
        metadata: summary.metadata,
        summary: `Daily Summary: ${summary.content.slice(0, 150)}...`
      });
    }

    res.json({
      supplements: enrichedLogs,
      qualitativeLogs: processedQualLogs
    });
  } catch (error) {
    console.error("Error fetching logs by date:", {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      date: req.params.date,
      serverTime: new Date().toISOString()
    });
    res.status(500).json({
      error: "Failed to fetch logs",
      details: error instanceof Error ? error.message : String(error)
    });
  }
});