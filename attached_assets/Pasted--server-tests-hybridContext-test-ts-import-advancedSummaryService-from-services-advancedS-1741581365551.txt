// server/tests/hybridContext.test.ts

import { advancedSummaryService } from '../services/advancedSummaryService';
import { embeddingService } from '../services/embeddingService';
import { constructUserContext } from '../services/llmContextService';
import { constructQueryContext } from '../services/llmContextService_query';
import { db } from '@db';
import { logSummaries, supplementLogs, qualitativeLogs } from '@db/schema';
import logger from '../utils/logger';

/**
 * Test suite for the hybrid context system
 * 
 * These tests verify the functionality of:
 * 1. Summarization service
 * 2. Vector embedding storage
 * 3. Vector-based retrieval
 * 4. Integration between services
 * 
 * Run tests with: npm test -- --testPathPattern=hybridContext
 */

describe('Hybrid Context System Tests', () => {
  // Mock user ID for testing
  const testUserId = 999;
  let createdSummaryId: number | null = null;

  // Helper to log token counts for comparison
  function logTokenUsage(context: string, description: string) {
    // Estimate tokens (roughly 4 chars per token for English)
    const estimatedTokens = Math.ceil(context.length / 4);
    logger.info(`Token usage - ${description}: ~${estimatedTokens} tokens`);
    return estimatedTokens;
  }

  // Clean up test data after tests
  afterAll(async () => {
    if (createdSummaryId) {
      try {
        await db.delete(logSummaries).where({ id: createdSummaryId });
        logger.info(`Cleaned up test summary with ID ${createdSummaryId}`);
      } catch (err) {
        logger.error(`Failed to clean up test data: ${err}`);
      }
    }
  });

  // Test summarization service
  describe('Summarization Service', () => {
    test('Should generate daily summary', async () => {
      // Create a mock date for testing
      const testDate = new Date();
      
      // Generate a summary
      const summaryId = await advancedSummaryService.generateDailySummary(testUserId, testDate);
      
      // Store for cleanup
      if (summaryId) createdSummaryId = summaryId;
      
      // Check result - either we got a summary or a valid null (no data to summarize)
      expect(summaryId !== undefined).toBeTruthy();
      
      if (summaryId) {
        // Fetch the summary to verify
        const [summary] = await db
          .select()
          .from(logSummaries)
          .where({ id: summaryId });
          
        expect(summary).toBeDefined();
        expect(summary.userId).toBe(testUserId);
        expect(summary.summaryType).toBe('daily');
        expect(typeof summary.content).toBe('string');
        expect(summary.content.length).toBeGreaterThan(0);
      }
    });
    
    test('Should extract significant changes', async () => {
      // Create a summary with changes
      const testSummary = `
        User started taking Vitamin D3 at 2000 IU daily.
        There was a notable improvement in energy levels.
        The user decreased their zinc dosage from 50mg to 25mg.
        No side effects were reported.
      `;
      
      // Use private method to extract changes via the instance
      // @ts-ignore - accessing private method for testing
      const changes = advancedSummaryService.extractSignificantChanges(testSummary);
      
      // Verify extraction
      expect(changes).toContain("User started taking Vitamin D3 at 2000 IU daily");
      expect(changes).toContain("There was a notable improvement in energy levels");
      expect(changes).toContain("The user decreased their zinc dosage from 50mg to 25mg");
      expect(changes).not.toContain("No side effects were reported");
    });
  });

  // Test embedding service
  describe('Embedding Service', () => {
    test('Should generate embeddings', async () => {
      // Test text
      const testText = "Vitamin C supplementation 500mg daily";
      
      // Generate embedding
      const embedding = await embeddingService.generateEmbedding(testText);
      
      // Verify result
      expect(embedding).toBeDefined();
      expect(Array.isArray(embedding)).toBe(true);
      expect(embedding.length).toBe(1536); // OpenAI embedding dimensions
      
      // Check values are valid numbers
      embedding.forEach(value => {
        expect(typeof value).toBe('number');
        expect(!isNaN(value)).toBe(true);
      });
    });
    
    test('Should find similar content with embeddings', async () => {
      // Skip if no real user data is available
      const users = await db.query.users.findMany({ limit: 1 });
      if (users.length === 0) {
        console.log('Skipping vector similarity test - no user data available');
        return;
      }
      
      const realUserId = users[0].id;
      
      // Test query
      const testQuery = "How is my vitamin D supplementation affecting my energy?";
      
      // Find similar content
      const similarContent = await embeddingService.findSimilarContent(testQuery, realUserId, 3);
      
      // Verify result format - might be empty if no relevant data
      expect(Array.isArray(similarContent)).toBe(true);
      
      // If we have results, check their structure
      if (similarContent.length > 0) {
        similarContent.forEach(item => {
          expect(typeof item.similarity).toBe('number');
          expect(item.similarity).toBeGreaterThan(0);
          expect(item.similarity).toBeLessThanOrEqual(1);
        });
      }
    });
  });

  // Test context building with token efficiency
  describe('Context Building', () => {
    test('Should build efficient context with vector retrieval', async () => {
      // Skip if no real user data is available
      const users = await db.query.users.findMany({ limit: 1 });
      if (users.length === 0) {
        console.log('Skipping context building test - no user data available');
        return;
      }
      
      const realUserId = users[0].id;
      
      // Test query
      const testQuery = "How is my vitamin D supplementation affecting my energy levels?";
      
      // Build context using our vector approach
      const vectorContext = await constructQueryContext(realUserId, testQuery);
      
      // Check the context structure
      expect(vectorContext).toBeDefined();
      expect(vectorContext.messages).toBeDefined();
      expect(Array.isArray(vectorContext.messages)).toBe(true);
      expect(vectorContext.messages.length).toBeGreaterThan(0);
      
      // Count tokens in the context
      const vectorContextString = JSON.stringify(vectorContext.messages);
      const vectorTokens = logTokenUsage(vectorContextString, "Vector-based context");
      
      // For comparison, we could simulate the old approach
      // This is just a simplified mockup of the old approach
      const mockOldContextBuilder = async (userId: number, query: string) => {
        // Simulate fetching all logs without filtering by relevance
        const allLogs = await db
          .select()
          .from(qualitativeLogs)
          .where({ userId })
          .limit(100);
          
        const allSupplementLogs = await db
          .select()
          .from(supplementLogs)
          .where({ userId })
          .limit(100);
          
        // Construct context with all logs
        return {
          messages: [
            { role: "system", content: "System prompt" },
            { 
              role: "user", 
              content: `
                User logs:
                ${allLogs.map(log => log.content).join('\n')}
                
                Supplement logs:
                ${JSON.stringify(allSupplementLogs)}
                
                Query: ${query}
              `
            }
          ]
        };
      };
      
      // Build context using simulated old approach
      const oldContext = await mockOldContextBuilder(realUserId, testQuery);
      const oldContextString = JSON.stringify(oldContext.messages);
      const oldTokens = logTokenUsage(oldContextString, "Old context approach");
      
      // Check token reduction - the vector approach should use fewer tokens
      // Only enforce if we have enough data to make a meaningful comparison
      if (oldTokens > 1000) {
        expect(vectorTokens).toBeLessThan(oldTokens);
        logger.info(`Token reduction: ${oldTokens - vectorTokens} tokens (${((oldTokens - vectorTokens) / oldTokens * 100).toFixed(2)}%)`);
      }
    });
    
    test('Should include relevant summaries in context', async () => {
      // Skip if no real user data is available
      const users = await db.query.users.findMany({ limit: 1 });
      if (users.length === 0) {
        console.log('Skipping summary inclusion test - no user data available');
        return;
      }
      
      const realUserId = users[0].id;
      
      // Create a test summary for the user
      const testDate = new Date();
      const summaryId = await advancedSummaryService.generateDailySummary(realUserId, testDate);
      
      if (summaryId) {
        // Build context that should include our new summary
        const context = await constructUserContext(realUserId.toString(), "How are my supplements affecting me?");
        
        // Get the summary content
        const [summary] = await db
          .select()
          .from(logSummaries)
          .where({ id: summaryId })
          .limit(1);
        
        // Convert to string for searching
        const contextString = JSON.stringify(context);
        
        // Check if summary content is included
        // We'll look for a distinctive part of the summary
        const summaryWords = summary.content.split(' ').filter(word => word.length > 5);
        let foundSummaryContent = false;
        
        if (summaryWords.length > 0) {
          // Look for a distinctive word from the summary
          const searchWord = summaryWords[Math.floor(summaryWords.length / 2)];
          foundSummaryContent = contextString.includes(searchWord);
        }
        
        // Clean up the test summary
        await db.delete(logSummaries).where({ id: summaryId });
        
        // Only make assertion if we found words to search for
        if (summaryWords.length > 0) {
          expect(foundSummaryContent).toBe(true);
        }
      }
    });
  });
  
  // Test performance metrics
  describe('Performance Tests', () => {
    test('Should complete context building within acceptable latency', async () => {
      // Skip if no real user data is available
      const users = await db.query.users.findMany({ limit: 1 });
      if (users.length === 0) {
        console.log('Skipping performance test - no user data available');
        return;
      }
      
      const realUserId = users[0].id;
      
      // Measure time for context building
      const startTime = Date.now();
      await constructQueryContext(realUserId, "How are my supplements affecting my health?");
      const duration = Date.now() - startTime;
      
      logger.info(`Context building latency: ${duration}ms`);
      
      // Acceptable latency should be under 1000ms for most cases
      // This threshold might need adjustment based on the environment
      expect(duration).toBeLessThan(2000);
    });
  });
});