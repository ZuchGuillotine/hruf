~/workspace$ npm test

> rest-express@1.0.0 test
> jest --config=jest.config.cjs

 FAIL  server/tests/summaryManager.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/embeddingService.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/advancedSummaryService.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/sendgrid.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/llmContextService.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/serviceInitializer.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

 FAIL  server/tests/openai.test.ts
  ● Test suite failed to run

    server/tests/setup.ts:7:1 - error TS2304: Cannot find name 'beforeAll'.

    7 beforeAll(async () => {
      ~~~~~~~~~
    server/tests/setup.ts:20:1 - error TS2304: Cannot find name 'afterAll'.

    20 afterAll(async () => {
       ~~~~~~~~
    server/tests/setup.ts:45:1 - error TS2304: Cannot find name 'jest'.

    45 jest.mock('openai', () => {
       ~~~~
    server/tests/setup.ts:47:14 - error TS2304: Cannot find name 'jest'.

    47     default: jest.fn().mockImplementation(() => {
                    ~~~~
    server/tests/setup.ts:51:21 - error TS2304: Cannot find name 'jest'.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                           ~~~~
    server/tests/setup.ts:51:53 - error TS7031: Binding element 'stream' implicitly has an 'any' type.

    51             create: jest.fn().mockImplementation(({ stream }) => {
                                                           ~~~~~~
    server/tests/setup.ts:78:19 - error TS2304: Cannot find name 'jest'.

    78           create: jest.fn().mockResolvedValue({
                         ~~~~

Running coverage on untested files...Failed to collect coverage from /home/runner/workspace/server/services/emailService.ts
ERROR: server/services/emailService.ts:57:19 - error TS2345: Argument of type '{ to: string; from: string | undefined; templateId: string; dynamicTemplateData: { firstName: string; setupAccountLink: string; currentYear: string; proPlanLink: string; }; }' is not assignable to parameter of type 'MailDataRequired'.
  Type '{ to: string; from: string | undefined; templateId: string; dynamicTemplateData: { firstName: string; setupAccountLink: string; currentYear: string; proPlanLink: string; }; }' is not assignable to type 'MailData & { content: MailContent[] & { 0: MailContent; }; }'.
    Type '{ to: string; from: string | undefined; templateId: string; dynamicTemplateData: { firstName: string; setupAccountLink: string; currentYear: string; proPlanLink: string; }; }' is not assignable to type 'MailData'.
      Types of property 'from' are incompatible.
        Type 'string | undefined' is not assignable to type 'EmailData'.
          Type 'undefined' is not assignable to type 'EmailData'.

57   await sendEmail(msg);
                     ~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/logService.ts
ERROR: server/services/logService.ts:50:21 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"qualitative_logs", { content: PgColumn<{ name: "content"; tableName: "qualitative_logs"; dataType: "string"; columnType: "PgText"; data: string; driverParam: string; notNull: true; hasDefault: false; ... 6 more ...; generated: undefined; }, {}, {}>; loggedAt: PgColumn<...>; type: PgColumn<...>; me...'.

50       query = query.where(gte(qualitativeLogs.loggedAt, fromDate));
                       ~~~~~
server/services/logService.ts:67:32 - error TS2339: Property 'loggedAt' does not exist on type 'PgTableWithColumns<{ name: "query_chats"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "query_chats"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 4 more ...; metadata: PgCo...'.

67       .orderBy(desc(queryChats.loggedAt))
                                  ~~~~~~~~
server/services/logService.ts:71:21 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"query_chats", { id: PgColumn<{ name: "id"; tableName: "query_chats"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 4 more ...; metadata: PgColumn<...>; }, ......'.

71       query = query.where(gte(queryChats.loggedAt, fromDate));
                       ~~~~~
server/services/logService.ts:71:42 - error TS2339: Property 'loggedAt' does not exist on type 'PgTableWithColumns<{ name: "query_chats"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "query_chats"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 4 more ...; metadata: PgCo...'.

71       query = query.where(gte(queryChats.loggedAt, fromDate));
                                            ~~~~~~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/advancedSummaryService.ts
ERROR: server/services/advancedSummaryService.ts:98:36 - error TS2769: No overload matches this call.
  Overload 1 of 4, '(value: string | number | Date): Date', gave the following error.
    Argument of type 'Date | null' is not assignable to parameter of type 'string | number | Date'.
      Type 'null' is not assignable to type 'string | number | Date'.
  Overload 2 of 4, '(value: string | number): Date', gave the following error.
    Argument of type 'Date | null' is not assignable to parameter of type 'string | number'.
      Type 'null' is not assignable to type 'string | number'.

98         const timestamp = new Date(log.takenAt).toLocaleTimeString();
                                      ~~~~~~~~~~~

server/services/advancedSummaryService.ts:109:36 - error TS2769: No overload matches this call.
  Overload 1 of 4, '(value: string | number | Date): Date', gave the following error.
    Argument of type 'Date | null' is not assignable to parameter of type 'string | number | Date'.
      Type 'null' is not assignable to type 'string | number | Date'.
  Overload 2 of 4, '(value: string | number): Date', gave the following error.
    Argument of type 'Date | null' is not assignable to parameter of type 'string | number'.
      Type 'null' is not assignable to type 'string | number'.

109         const timestamp = new Date(log.loggedAt).toLocaleTimeString();
                                       ~~~~~~~~~~~~

server/services/advancedSummaryService.ts:261:10 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { userId: number | SQL<unknown> | Placeholder<string, any>; startDate: Date | SQL<unknown> | Placeholder<string, any>; content: string | SQL<unknown> | Placeholder<...>; ... 5 more ...; metadata?: SQL<...> | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Object literal may only specify known properties, and 'dailySummaryCount' does not exist in type 'SQL<unknown> | { supplementCount?: number | undefined; qualitativeLogCount?: number | undefined; quantitativeLogCount?: number | undefined; significantChanges?: string[] | undefined; } | Placeholder<...>'.
  Overload 2 of 2, '(values: { userId: number | SQL<unknown> | Placeholder<string, any>; startDate: Date | SQL<unknown> | Placeholder<string, any>; content: string | SQL<unknown> | Placeholder<...>; ... 5 more ...; metadata?: SQL<...> | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Object literal may only specify known properties, and 'userId' does not exist in type '{ userId: number | SQL<unknown> | Placeholder<string, any>; startDate: Date | SQL<unknown> | Placeholder<string, any>; content: string | SQL<unknown> | Placeholder<...>; ... 5 more ...; metadata?: SQL<...> | ... 3 more ... | undefined; }[]'.

261         .values({
             ~~~~~~

  node_modules/drizzle-orm/pg-core/query-builders/insert.d.ts:27:101
     27 export type PgInsertValue<TTable extends PgTable<TableConfig>, OverrideT extends boolean = false> = {
                                                                                                            ~
     28     [Key in keyof InferInsertModel<TTable, {
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
     34     }>[Key] | SQL | Placeholder;
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     35 } & {};
        ~
    The expected type comes from property 'metadata' which is declared here on type '{ userId: number | SQL<unknown> | Placeholder<string, any>; startDate: Date | SQL<unknown> | Placeholder<string, any>; content: string | SQL<unknown> | Placeholder<...>; ... 5 more ...; metadata?: SQL<...> | ... 3 more ... | undefined; }'
server/services/advancedSummaryService.ts:341:42 - error TS2339: Property 'length' does not exist on type 'NeonHttpQueryResult<Record<string, unknown>>'.

341       logger.info(`Found ${usersWithLogs.length} users with logs on ${date.toISOString().split('T')[0]}`);
                                             ~~~~~~
server/services/advancedSummaryService.ts:344:26 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

344       for (const user of usersWithLogs) {
                             ~~~~~~~~~~~~~
server/services/advancedSummaryService.ts:397:47 - error TS2339: Property 'length' does not exist on type 'NeonHttpQueryResult<Record<string, unknown>>'.

397       logger.info(`Found ${usersWithSummaries.length} users with daily summaries between ${startDate.toISOString().split('T')[0]} and ${endDate.toISOString().split('T')[0]}`);
                                                  ~~~~~~
server/services/advancedSummaryService.ts:400:26 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

400       for (const user of usersWithSummaries) {
                             ~~~~~~~~~~~~~~~~~~
server/services/advancedSummaryService.ts:483:60 - error TS18047: 'log.takenAt' is possibly 'null'.

483         logContent = `Supplement: ${log.name}, Taken At: ${log.takenAt.toISOString()}, Dosage: ${log.dosage}, Frequency: ${log.frequency}, Notes: ${log.notes || 'None'}, Effects: ${effectsText}`;
                                                               ~~~~~~~~~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/llmService.ts
ERROR: server/services/llmService.ts:3:20 - error TS2307: Cannot find module './db' or its corresponding type declarations.

3 import { db } from './db';
                     ~~~~~~
server/services/llmService.ts:4:40 - error TS2307: Cannot find module './schema' or its corresponding type declarations.

4 import { qualitativeLogs, users } from './schema';
                                         ~~~~~~~~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/llmSummaryService.ts
ERROR: server/services/llmSummaryService.ts:99:5 - error TS2769: No overload matches this call.
  Overload 2 of 2, '(values: { userId: number | SQL<unknown> | Placeholder<string, any>; summary: string | SQL<unknown> | Placeholder<string, any>; periodStart: Date | SQL<...> | Placeholder<...>; periodEnd: Date | ... 1 more ... | Placeholder<...>; id?: number | ... 2 more ... | undefined; createdAt?: Date | ... 3 more ... | undefined; metadata?: Record<...> | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Object literal may only specify known properties, and 'userId' does not exist in type '{ userId: number | SQL<unknown> | Placeholder<string, any>; summary: string | SQL<unknown> | Placeholder<string, any>; periodStart: Date | SQL<unknown> | Placeholder<...>; periodEnd: Date | ... 1 more ... | Placeholder<...>; id?: number | ... 2 more ... | undefined; createdAt?: Date | ... 3 more ... | undefined; met...'.

99     userId,
       ~~~~~~

server/services/llmSummaryService.ts:100:30 - error TS2339: Property 'response' does not exist on type 'void | { response: string; streaming: boolean; error?: undefined; } | { error: string; streaming: boolean; response?: undefined; }'.
  Property 'response' does not exist on type 'void'.

100     summary: summaryResponse.response,
                                 ~~~~~~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/llmContextService.ts
ERROR: server/services/llmContextService.ts:136:14 - error TS2322: Type '{ role: string; content: string; }[]' is not assignable to type 'Message[]'.
  Type '{ role: string; content: string; }' is not assignable to type 'Message'.
    Types of property 'role' are incompatible.
      Type 'string' is not assignable to type '"system" | "user" | "assistant"'.

136     return { messages };
                 ~~~~~~~~

  server/services/llmContextService.ts:19:90
    19 export async function constructUserContext(userId: string, userQuery: string): Promise<{ messages: Message[] }> {
                                                                                                ~~~~~~~~
    The expected type comes from property 'messages' which is declared here on type '{ messages: Message[]; }'
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/embeddingService.ts
ERROR: server/services/embeddingService.ts:133:12 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

133         ...similarSummaries,
               ~~~~~~~~~~~~~~~~
server/services/embeddingService.ts:134:12 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

134         ...similarLogs
               ~~~~~~~~~~~
server/services/embeddingService.ts:166:17 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

166           const [log] = await db.execute(sql`
                    ~~~~~
server/services/embeddingService.ts:172:17 - error TS2488: Type 'NeonHttpQueryResult<Record<string, unknown>>' must have a '[Symbol.iterator]()' method that returns an iterator.

172           const [log] = await db.execute(sql`
                    ~~~~~
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/llmContextService_query.ts
ERROR: server/services/llmContextService_query.ts:142:14 - error TS2322: Type '{ role: string; content: string; }[]' is not assignable to type 'Message[]'.
  Type '{ role: string; content: string; }' is not assignable to type 'Message'.
    Types of property 'role' are incompatible.
      Type 'string' is not assignable to type '"system" | "user" | "assistant"'.

142     return { messages };
                 ~~~~~~~~

  server/services/llmContextService_query.ts:32:98
    32 export async function constructQueryContext(userId: number | null, userQuery: string): Promise<{ messages: Message[] }> {
                                                                                                        ~~~~~~~~
    The expected type comes from property 'messages' which is declared here on type '{ messages: Message[]; }'
STACK: 
Failed to collect coverage from /home/runner/workspace/server/services/stripe.ts
ERROR: server/services/stripe.ts:11:3 - error TS2322: Type '"2023-10-16"' is not assignable to type '"2025-01-27.acacia"'.

11   apiVersion: '2023-10-16'
     ~~~~~~~~~~
server/services/stripe.ts:48:9 - error TS2322: Type 'string | null' is not assignable to type 'Date | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | null | undefined'.
  Type 'string' is not assignable to type 'Date | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | null | undefined'.

48         trialEndsAt: subscription.trial_end ? new Date(subscription.trial_end * 1000).toISOString() : null,
           ~~~~~~~~~~~

  node_modules/drizzle-orm/pg-core/query-builders/update.d.ts:25:57
    25 export type PgUpdateSetSource<TTable extends PgTable> = {
                                                               ~
    26     [Key in keyof TTable['$inferInsert']]?: GetColumnData<TTable['_']['columns'][Key]> | SQL | PgColumn | undefined;
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    27 } & {};
       ~
    The expected type comes from property 'trialEndsAt' which is declared here on type '{ username?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; password?: string | SQL<...> | PgColumn<...> | undefined; ... 15 more ...; updatedAt?: Date | ... 3 more ... | undefined; }'
STACK: 
---|---------|----------|---------|---------|-------------------
... | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
---|---------|----------|---------|---------|-------------------
... |       0 |        0 |       0 |       0 |                   
 ... |       0 |        0 |       0 |       0 |                   
   |       0 |        0 |       0 |       0 | 4-143             
 ... |       0 |        0 |       0 |       0 |                   
   |       0 |      100 |       0 |       0 | 2-13              
   |       0 |        0 |       0 |       0 | 3-160             
 ... |       0 |        0 |       0 |       0 |                   
   |       0 |        0 |       0 |       0 | 1-106             
   |       0 |        0 |       0 |       0 | 4-130             
   |       0 |        0 |       0 |       0 | 2-125             
---|---------|----------|---------|---------|-------------------
Test Suites: 7 failed, 7 total
Tests:       0 total
Snapshots:   0 total
Time:        89.286 s
Ran all test suites.