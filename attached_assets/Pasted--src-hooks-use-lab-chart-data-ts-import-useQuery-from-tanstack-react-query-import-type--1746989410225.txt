// src/hooks/use-lab-chart-data.ts

import { useQuery } from '@tanstack/react-query';
import type { Series, BiomarkerDataPoint } from '@/types/chart';

interface ChartEntry {
  name: string;
  value: number;
  unit: string;
  testDate: string;
  category?: string;
}

interface ChartApiResponse {
  success: boolean;
  data: ChartEntry[];
  pagination: { page: number; pageSize: number; total: number };
}

export interface UseLabChartDataReturn {
  series: Series[];
  allBiomarkers: string[];
  categories: Record<string, string>;
}

export function useLabChartData() {
  return useQuery<ChartApiResponse, Error, UseLabChartDataReturn>(
    ['labChartData'],
    async () => {
      const res = await fetch('/api/labs/chart-data', {
        credentials: 'include',
      });
      if (!res.ok) throw new Error(res.statusText);
      const json: ChartApiResponse = await res.json();
      if (!json.success) throw new Error('API returned unsuccessful');

      // Group flat entries by biomarker name
      const map = new Map<string, { points: { testDate: string; value: number }[]; unit: string; category?: string }>();
      for (const e of json.data) {
        const bucket = map.get(e.name) ?? { points: [], unit: e.unit, category: e.category };
        bucket.points.push({ testDate: e.testDate, value: e.value });
        map.set(e.name, bucket);
      }

      // Build Series[]
      const series: Series[] = Array.from(map.entries()).map(([name, { points, unit, category }]) => ({
        name,
        unit,
        category: category || 'other',
        points: points.sort((a, b) => Date.parse(a.testDate) - Date.parse(b.testDate)),
      }));

      // Export flat lists for selector
      const allBiomarkers = series.map(s => s.name);
      const categories: Record<string, string> = {};
      series.forEach(s => { categories[s.name] = s.category; });

      return { series, allBiomarkers, categories };
    },
    {
      staleTime: 5 * 60 * 1000,
      keepPreviousData: true,
    }
  );
}
