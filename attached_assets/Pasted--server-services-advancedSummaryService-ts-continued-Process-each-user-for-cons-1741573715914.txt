// server/services/advancedSummaryService.ts (continued)

      // Process each user
      for (const user of usersWithLogs) {
        const userId = user.user_id;
        
        // Check if summary already exists for this user and date
        const existingSummary = await db
          .select()
          .from(logSummaries)
          .where(
            and(
              eq(logSummaries.userId, userId),
              eq(logSummaries.summaryType, 'daily'),
              between(logSummaries.startDate, startOfDay, endOfDay)
            )
          )
          .limit(1);
          
        if (existingSummary.length > 0) {
          logger.info(`Daily summary already exists for user ${userId} on ${date.toISOString().split('T')[0]}`);
          continue;
        }
        
        // Generate daily summary
        await this.generateDailySummary(userId, date);
      }
      
      logger.info(`Completed daily summary processing for ${date.toISOString().split('T')[0]}`);
    } catch (error) {
      logger.error(`Error processing daily summaries for ${date.toISOString().split('T')[0]}:`, error);
    }
  }
  
  /**
   * Process weekly summaries for all users
   * @param endDate End date of the week (typically Sunday)
   */
  async processWeeklySummaries(endDate: Date = new Date()): Promise<void> {
    try {
      // Calculate start of week (7 days before end date)
      const startDate = new Date(endDate);
      startDate.setDate(startDate.getDate() - 7);
      startDate.setHours(0, 0, 0, 0);
      
      // End date should be end of day
      const endOfDay = new Date(endDate);
      endOfDay.setHours(23, 59, 59, 999);
      
      // Find users with daily summaries in this period
      const usersWithSummaries = await db.execute(sql`
        SELECT DISTINCT user_id
        FROM log_summaries
        WHERE summary_type = 'daily' AND start_date BETWEEN ${startDate} AND ${endOfDay}
      `);
      
      logger.info(`Found ${usersWithSummaries.length} users with daily summaries between ${startDate.toISOString().split('T')[0]} and ${endDate.toISOString().split('T')[0]}`);
      
      // Process each user
      for (const user of usersWithSummaries) {
        const userId = user.user_id;
        
        // Check if weekly summary already exists
        const existingSummary = await db
          .select()
          .from(logSummaries)
          .where(
            and(
              eq(logSummaries.userId, userId),
              eq(logSummaries.summaryType, 'weekly'),
              between(logSummaries.startDate, startDate, endOfDay)
            )
          )
          .limit(1);
          
        if (existingSummary.length > 0) {
          logger.info(`Weekly summary already exists for user ${userId} for week ending ${endDate.toISOString().split('T')[0]}`);
          continue;
        }
        
        // Generate weekly summary
        await this.generateWeeklySummary(userId, startDate, endOfDay);
      }
      
      logger.info(`Completed weekly summary processing for week ending ${endDate.toISOString().split('T')[0]}`);
    } catch (error) {
      logger.error(`Error processing weekly summaries for week ending ${endDate.toISOString().split('T')[0]}:`, error);
    }
  }
  
  /**
   * Generate summary for a specific log entry
   * @param logId ID of the log
   * @param logType Type of log (qualitative or quantitative)
   */
  async generateLogSummary(logId: number, logType: 'qualitative' | 'quantitative'): Promise<string | null> {
    try {
      let logContent = '';
      let userId: number | null = null;
      
      if (logType === 'qualitative') {
        const [log] = await db
          .select()
          .from(qualitativeLogs)
          .where(eq(qualitativeLogs.id, logId))
          .limit(1);
          
        if (!log) {
          logger.error(`Qualitative log ${logId} not found`);
          return null;
        }
        
        logContent = log.content;
        userId = log.userId;
      } else {
        // For quantitative logs, fetch and format the data
        const [log] = await db
          .select({
            userId: supplementLogs.userId,
            takenAt: supplementLogs.takenAt,
            notes: supplementLogs.notes,
            effects: supplementLogs.effects,
            name: supplements.name,
            dosage: supplements.dosage,
            frequency: supplements.frequency
          })
          .from(supplementLogs)
          .leftJoin(supplements, eq(supplements.id, supplementLogs.supplementId))
          .where(eq(supplementLogs.id, logId))
          .limit(1);
          
        if (!log) {
          logger.error(`Quantitative log ${logId} not found`);
          return null;
        }
        
        const effectsText = log.effects 
          ? Object.entries(log.effects)
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ')
          : 'No effects recorded';
          
        logContent = `Supplement: ${log.name}, Taken At: ${log.takenAt.toISOString()}, Dosage: ${log.dosage}, Frequency: ${log.frequency}, Notes: ${log.notes || 'None'}, Effects: ${effectsText}`;
        userId = log.userId;
      }
      
      if (!userId) {
        logger.error(`User ID not found for ${logType} log ${logId}`);
        return null;
      }
      
      // Generate a summary using OpenAI
      const summaryPrompt = `
      You are tasked with summarizing a single supplement log entry. Create a concise summary that captures the key information and any notable effects or observations.
      
      Input: ${logContent}
      
      Please provide a concise summary in 1-2 sentences focusing on the most relevant information.
      `;
      
      const completion = await openai.chat.completions.create({
        model: this.SUMMARY_MODEL,
        messages: [
          {
            role: "user",
            content: summaryPrompt
          }
        ],
        max_tokens: 150
      });
      
      const summary = completion.choices[0]?.message?.content?.trim() || null;
      
      // Create embedding for the log
      if (summary) {
        await embeddingService.createLogEmbedding(logId, logContent, logType);
      }
      
      return summary;
    } catch (error) {
      logger.error(`Error generating log summary for ${logType} log ${logId}:`, error);
      return null;
    }
  }
  
  /**
   * Retrieves the most relevant summaries for a user query
   * @param userId User ID
   * @param query User query text
   * @param limit Maximum number of summaries to return
   * @returns Array of relevant summaries
   */
  async getRelevantSummaries(userId: number, query: string, limit: number = 3): Promise<any[]> {
    try {
      // Use vector search to find similar summaries
      const similarContent = await embeddingService.findSimilarContent(query, userId, limit);
      
      // Fetch the full summary content for each match
      const relevantSummaries = [];
      
      for (const item of similarContent) {
        if (item.summary_id) {
          // It's a summary
          const [summary] = await db
            .select()
            .from(logSummaries)
            .where(eq(logSummaries.id, item.summary_id))
            .limit(1);
            
          if (summary) {
            relevantSummaries.push({
              ...summary,
              similarity: item.similarity,
              type: 'summary'
            });
          }
        } else if (item.log_id) {
          // It's a log
          if (item.log_type === 'qualitative') {
            const [log] = await db
              .select()
              .from(qualitativeLogs)
              .where(eq(qualitativeLogs.id, item.log_id))
              .limit(1);
              
            if (log) {
              relevantSummaries.push({
                ...log,
                similarity: item.similarity,
                type: 'qualitative_log'
              });
            }
          } else {
            // Quantitative log
            const [log] = await db
              .select({
                id: supplementLogs.id,
                userId: supplementLogs.userId,
                takenAt: supplementLogs.takenAt,
                notes: supplementLogs.notes,
                effects: supplementLogs.effects,
                name: supplements.name,
                dosage: supplements.dosage,
                frequency: supplements.frequency
              })
              .from(supplementLogs)
              .leftJoin(supplements, eq(supplements.id, supplementLogs.supplementId))
              .where(eq(supplementLogs.id, item.log_id))
              .limit(1);
              
            if (log) {
              relevantSummaries.push({
                ...log,
                similarity: item.similarity,
                type: 'quantitative_log'
              });
            }
          }
        }
      }
      
      // Sort by similarity score
      return relevantSummaries.sort((a, b) => b.similarity - a.similarity);
    } catch (error) {
      logger.error(`Error getting relevant summaries for user ${userId}:`, error);
      return [];
    }
  }
}

// Export a singleton instance
export const advancedSummaryService = new AdvancedSummaryService();