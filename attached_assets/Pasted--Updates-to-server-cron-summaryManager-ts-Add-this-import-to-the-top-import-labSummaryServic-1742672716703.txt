// Updates to server/cron/summaryManager.ts

// Add this import to the top
import { labSummaryService } from '../services/labSummaryService';

// Add this method to the SummaryTaskManager class
/**
 * Start lab results processing task
 * @param hour Hour of the day to run the task (0-23)
 */
startLabProcessingTask(hour: number = 2): void {
  const cronExpression = `0 0 ${hour} * * *`; // Run at the specified hour every day
  
  logger.info(`Scheduling lab processing task to run at ${hour}:00 AM daily`);
  
  this.labProcessingTask = cron.schedule(cronExpression, async () => {
    try {
      logger.info('Running scheduled lab processing task');
      await this.processUnprocessedLabResults();
    } catch (error) {
      logger.error('Error in scheduled lab processing task:', error);
    }
  });
}

/**
 * Process all lab results that haven't been summarized yet
 */
async processUnprocessedLabResults(): Promise<void> {
  try {
    // Find all lab results without a summary
    const unprocessedLabs = await db
      .select()
      .from(labResults)
      .where(
        sql`metadata->>'summary' IS NULL OR metadata->>'summary' = ''`
      );
    
    logger.info(`Found ${unprocessedLabs.length} unprocessed lab results`);
    
    // Process each unprocessed lab
    for (const lab of unprocessedLabs) {
      try {
        await labSummaryService.summarizeLabResult(lab.id);
        logger.info(`Processed lab result ${lab.id}`);
        
        // Add a small delay to avoid API rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        logger.error(`Error processing lab result ${lab.id}:`, error);
        // Continue with the next lab
      }
    }
    
    logger.info('Completed processing of unprocessed lab results');
  } catch (error) {
    logger.error('Error in processing unprocessed lab results:', error);
  }
}

// Add a new task property to the class
private labProcessingTask: cron.ScheduledTask | null = null;

// Update the stopAllTasks method to include the new task
stopAllTasks(): void {
  // Existing code...
  
  if (this.labProcessingTask) {
    this.labProcessingTask.stop();
    this.labProcessingTask = null;
    logger.info('Lab processing task stopped');
  }
  
  // Existing code...
}