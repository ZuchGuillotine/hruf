# StackTracker AWS Migration & Monorepo Transition Plan (High‚ÄëLevel)

> **Goal** ‚Äì Move the live StackTracker web app from Replit to AWS (Elastic Beanstalk + RDS PostgreSQL), while restructuring the codebase into a Turbo/Nx monorepo that will later power iOS & Android builds via Expo. The cut‚Äëover must avoid user‚Äëvisible downtime and preserve all current functionality.

---

## Implementation Status (Updated - May 26, 2025)

### Completed ‚úÖ
1. **AWS Account Setup**
   - Created IAM user with custom policy for infrastructure deployment
   - Configured AWS CLI credentials
   - Bootstrapped CDK environment

2. **Infrastructure as Code (IaC)**
   - Initialized CDK project in `/infra` directory
   - Created comprehensive VPC infrastructure stack with:
     - Public subnets (10.0.0.0/24, 10.0.1.0/24) for load balancers
     - Private subnets (10.0.2.0/24, 10.0.3.0/24) for application servers
     - Isolated subnets (10.0.4.0/24, 10.0.5.0/24) for databases
     - NAT Gateway for private subnet internet access
     - VPC endpoints for S3, Secrets Manager, and RDS
     - Security groups for database and application tiers
   - Implemented RDS stack with:
     - PostgreSQL 15.8 with pgvector extension support (deferred for later implementation)
     - Parameter group configuration
     - Security groups and subnet placement in isolated subnets
     - Automated backups (7-day retention)
     - Maintenance windows (Mon 04:00-05:00 UTC)
     - Secrets Manager integration for credentials
   - S3 bucket setup for uploads with:
     - Versioning enabled
     - Server-side encryption (AES256)
     - CORS configuration for web access
     - Public access blocked for security
   - Elastic Beanstalk configuration:
     - Created EB application (stacktracker-app-v3)
     - Set up EB environment (stacktracker-env-v3)
     - Configured Docker platform (Amazon Linux 2023 v4.5.2)
     - Set up IAM roles and instance profile
     - Configured environment variables for RDS and services
     - Set up health check endpoint
   - **Stack Name**: `StackTrackerInfraStackV2` (successfully deployed)
   - **Export Names**: Updated with V3 suffix for clean deployment
   - **Resource Naming**: All resources using versioned names (V3) to avoid conflicts
   - ‚úÖ Monitoring Stack Implementation:
     - Created CloudWatch dashboard for RDS and EB metrics
     - Added alarms for CPU utilization and connections
     - Implemented WAF rules for security
     - Set up rate limiting for auth endpoints
     - Added SQL injection protection
     - Successfully deployed monitoring stack

### In Progress üöß
1. **Infrastructure Verification**
   - ‚úÖ CDK stack synthesis successful
   - ‚úÖ CloudFormation deployment successful
   - ‚úÖ VPC connectivity and security groups configured
   - ‚úÖ RDS instance accessibility from private subnets
   - ‚úÖ S3 bucket access and CORS configuration verified
   - ‚úÖ Secrets Manager integration working
   - üöß Testing application deployment to Elastic Beanstalk
   - üöß Verifying RDS connection from EB environment

### Current Issues / Failures ‚ùó
1. **PgVector Extension Installation**
   - **Status**: Deferred for later implementation
   - **Plan**: Will implement Lambda-based installation after initial infrastructure is stable
   - **Impact**: Vector search functionality will be added in a future update

2. **Application Deployment**
   - **Status**: Pending
   - **Plan**: Create Dockerfile and deploy application to EB environment
   - **Impact**: Application not yet accessible through EB environment

### Issues Resolved ‚úÖ
1. **Stack Deletion Conflict**
   - Original `InfraStack` was stuck in DELETE_IN_PROGRESS state
   - **Solution**: Renamed to `StackTrackerInfraStackV2` with updated export names
   
2. **PostgreSQL Configuration Issues**
   - `shared_preload_libraries: vector` not supported in RDS
   - **Solution**: Deferred pgvector installation for later implementation
   - PostgreSQL version 15.3 not available
   - **Solution**: Updated to PostgreSQL 15.8
   
3. **S3 Bucket Naming Conflicts**
   - Explicit bucket names caused conflicts with existing resources
   - **Solution**: Removed explicit naming, letting CDK auto-generate unique names

4. **Secret Name Conflicts**
   - Existing secret `stacktracker/db-credentials` caused deployment failure
   - **Solution**: Updated to `stacktracker/db-credentials-v3`

5. **Resource Naming Conflicts**
   - VPC and security group names conflicted with existing resources
   - **Solution**: Updated all resource names to include V3 suffix

6. **Elastic Beanstalk Configuration**
   - Incorrect IAM policy names for service role
   - **Solution**: Updated to include 'service-role/' prefix
   - Incorrect solution stack name
   - **Solution**: Updated to '64bit Amazon Linux 2023 v4.5.2 running Docker'

7. **Monitoring Stack Deployment**
   - Successfully deployed monitoring infrastructure
   - CloudWatch dashboard operational
   - WAF rules configured and active
   - Alarms set up for critical metrics

### Pending ‚è≥
1. **Application Deployment** (Next Steps)
   - [ ] Create Dockerfile for application
   - [ ] Configure environment variables for EB
   - [ ] Test application deployment
   - [ ] Verify RDS connection from EB environment
   - [ ] Set up CI/CD pipeline for automated deployments

2. **Database Migration Preparation**
   - [ ] Create database migration scripts
   - [ ] Test connection to new RDS instance
   - [ ] Plan data transfer strategy from current database
   - [ ] Validate pgvector functionality with existing data

3. **Application Integration**
   - [ ] Update application configuration for AWS resources
   - [ ] Configure environment variables for new infrastructure
   - [ ] Test application connectivity to RDS and S3
   - [ ] Validate all existing functionality

4. **Monorepo Restructuring**
   - [x] Move current code into `apps/web`
   - [x] Set up shared packages
     - [x] Created `packages/ui` for shared UI components
     - [x] Created `packages/shared-components` for cross-platform components
     - [x] Migrated UI components from web to `packages/ui`
     - [x] Migrated functional components to `packages/shared-components` with:
       - Platform-agnostic types and logic in `index.tsx`
       - React Native implementations in `native.tsx`
       - Component categorization (auth, biomarkers, supplements, etc.)
   - [ ] Configure Turbo tasks
   - [ ] Update web app to use shared components
   - [ ] Test shared components in web context
   - [ ] Begin React Native implementations

5. **CI/CD Pipeline**
   - [ ] GitHub Actions workflow setup
   - [ ] Docker build configuration
   - [ ] Deployment automation

6. **Mobile App Setup**
   - ‚úÖ Initialized Expo project in `apps/mobile`
   - ‚úÖ Set up React Navigation with proper types
   - ‚úÖ Created basic screen components:
     - Home screen with welcome message
     - Profile screen with sections for personal info, biomarkers, and supplements
     - Settings screen with preferences and account actions
     - Auth screen with login/signup functionality
   - ‚úÖ Implemented navigation structure:
     - Root stack for auth/main flow
     - Tab navigator for main app screens
     - Proper type definitions for navigation
   - üöß Next steps:
     - Add shared components from packages
     - Implement authentication logic
     - Set up API client
     - Add state management

### Next Steps
1. **Mobile App Development**
   - [ ] Integrate shared components from packages
   - [ ] Implement authentication flow
   - [ ] Set up API client for backend communication
   - [ ] Add state management (Redux/Context)
   - [ ] Implement offline support
   - [ ] Add push notifications

2. **Infrastructure Monitoring**
   - [ ] Set up additional CloudWatch alarms
   - [ ] Configure custom metrics
   - [ ] Implement log aggregation
   - [ ] Set up alert notifications
   - [ ] Create runbooks for common issues

---

## Current Infrastructure Configuration

### VPC Architecture
```
VPC: 10.0.0.0/16
‚îú‚îÄ‚îÄ Public Subnets (us-west-2a, us-west-2b)
‚îÇ   ‚îú‚îÄ‚îÄ 10.0.0.0/24 - Load balancers, NAT Gateway
‚îÇ   ‚îî‚îÄ‚îÄ 10.0.1.0/24 - Load balancers
‚îú‚îÄ‚îÄ Private Subnets (us-west-2a, us-west-2b)
‚îÇ   ‚îú‚îÄ‚îÄ 10.0.2.0/24 - Application servers, Lambda functions
‚îÇ   ‚îî‚îÄ‚îÄ 10.0.3.0/24 - Application servers
‚îî‚îÄ‚îÄ Isolated Subnets (us-west-2a, us-west-2b)
    ‚îú‚îÄ‚îÄ 10.0.4.0/24 - RDS database
    ‚îî‚îÄ‚îÄ 10.0.5.0/24 - RDS database
```

### Database Configuration
- **Engine**: PostgreSQL 15.8
- **Instance**: db.t3.micro (staging)
- **Storage**: 20GB (auto-scaling to 100GB)
- **Backups**: 7-day retention, 03:00-04:00 UTC window
- **Extensions**: pgvector (installed via Lambda function)
- **Security**: Isolated subnets, security group restrictions

### Security Groups
- **Application SG**: Allows outbound traffic for app servers
- **Database SG**: Only allows inbound 5432 from Application SG
- **VPC Endpoints**: Secure access to AWS services without internet

---

## Verification Steps (Post-Deployment)

### 1. Infrastructure Verification
```bash
# Check CloudFormation stack status
aws cloudformation describe-stacks --stack-name StackTrackerInfraStackV2

# Verify RDS instance
aws rds describe-db-instances --db-instance-identifier <instance-id>

# Test S3 bucket access
aws s3 ls s3://<bucket-name>
```

### 2. Database Connectivity Test
```bash
# Get database credentials from Secrets Manager
aws secretsmanager get-secret-value --secret-id stacktracker/db-credentials-v3

# Test connection (from within VPC)
psql -h <rds-endpoint> -U stacktracker_admin -d stacktracker

# Verify pgvector extension
SELECT * FROM pg_extension WHERE extname = 'vector';
```

### 3. Application Configuration Updates
```typescript
// Update database configuration
const dbConfig = {
  host: process.env.RDS_ENDPOINT,
  port: 5432,
  database: 'stacktracker',
  // Use Secrets Manager for credentials
}

// Update S3 configuration
const s3Config = {
  bucket: process.env.S3_BUCKET_NAME,
  region: 'us-west-2'
}
```

---

## 0 ¬∑ Prerequisites & Assumptions

* Small active user base (<100) ‚áí brief read‚Äëonly window is acceptable but strive for 0‚Äëdowntime.
* AWS account, Route 53, and Apple/Google developer accounts are already provisioned.
* Current Postgres data on Replit can be exported with `pg_dump`.
* CI provider is GitHub Actions (can be swapped later).

---

## 1 ¬∑ Branch Strategy

1. **Create long‚Äëlived branch** `migration/aws-monorepo` off `main`.
2. Protect `main`; all prod deploys continue via Replit until final cut‚Äëover.
3. Periodically merge `main` ‚Üí `migration` to stay up to date.

---

## 2 ¬∑ Infrastructure as Code (IaC)

> **Folder:** `/infra`
> | Stack | Service | Notes |
> |-------|---------|-------|
> | **VPC** | 2 public + 2 private + 2 isolated subnets | ‚úÖ Deployed with proper network segmentation |
> | **DB** | **RDS PostgreSQL 15.8** | ‚úÖ Deployed with pgvector extension support |
> | **Compute** | **Elastic Beanstalk (EB)** | ‚è≥ Pending - Docker platform configuration |
> | **Storage** | S3 bucket (auto-generated name) | ‚úÖ Deployed with versioning and CORS |
> | **Secrets** | AWS Secrets Manager | ‚úÖ Deployed - stores DB credentials |
> | **Monitoring** | CloudWatch Logs + Alarms | ‚è≥ Pending - Will monitor EB and RDS |

Use **CloudFormation or AWS CDK** to template the above. Ship a `staging` stack first, followed by `prod`.

---

## 3 ¬∑ Monorepo Scaffolding

```
/
‚îú apps/
‚îÇ  ‚îú web/        # existing Vite/Express app
‚îÇ  ‚îî mobile/     # Expo placeholder
‚îú packages/
‚îÇ  ‚îú ui/         # shared RN + web components
‚îÇ  ‚îî core/       # api clients, hooks, utils
‚îú infra/         # IaC code
‚îú turbo.json
‚îú package.json   # workspaces
‚îî tsconfig.json
```

1. Enable **pnpm or Yarn workspaces**.
2. Add Turbo tasks: `build`, `lint`, `test`, `deploy:web`.
3. Move current code into `apps/web`; fix paths.

---

## 4 ¬∑ Containerization & EB

1. Add multi‚Äëstage **Dockerfile** in `apps/web` (Node 20 Alpine).
2. `Dockerrun.aws.json` for EB or set platform to *Docker*.
3. EB environment variables map ‚Üí Secrets Manager.
4. Configure EB health check to `/_health`.

---

## 5 ¬∑ CI/CD Pipeline (GitHub Actions)

| Job            | Trigger                | Key Steps                                           |
| -------------- | ---------------------- | --------------------------------------------------- |
| `build-web`    | push ‚Üí `migration/*`   | Turbo cache ‚Üí Docker build ‚Üí push to ECR `staging`. |
| `deploy-web`   | success of `build-web` | Update EB environment via CLI; wait for green.      |
| `db-migrate`   | after deploy           | Run `drizzle-kit push` against RDS.                 |
| `promote-prod` | tag `v*` on `main`     | Same build, deploy to **prod** EB.                  |
| `mobile-build` | on‚Äëdemand              | `eas build --platform all` (later phase).           |

---

## 6 ¬∑ Data Migration

1. Put Replit DB in **read‚Äëonly** mode.
2. `pg_dump` ‚Üí `pg_restore` into RDS.
3. Update EB env vars to RDS endpoint; restart.
4. Smoke‚Äëtest staging.
5. Re‚Äëenable writes.

---

## 7 ¬∑ Cut‚ÄëOver / Production Switch

1. Lower DNS TTL to 60 seconds (24 h prior).
2. Merge `migration` ‚Üí `main`; pipeline deploys to **prod** EB.
3. Validate ALB health checks, Stripe webhooks.
4. Switch Route 53 record to EB ALB.
5. Monitor logs & metrics for 30 minutes; rollback via previous EB version if needed.

---

## 8 ¬∑ Mobile Roll‚ÄëOut (Post‚ÄëMigration)

1. Scaffold `apps/mobile` via **Expo TS** template.
2. Consume `packages/ui` components.
3. Configure `.env.*` for API base URL & publishable keys.
4. Integrate Apple/Google sign‚Äëin (if required).
5. Build with **EAS Build**; TestFlight & internal testing.
6. Submit to App Store & Play Store.
7. Link store listings to privacy policy (hosted on website).

---

## 9 ¬∑ Risk Mitigation & Rollback

* Keep Replit deployment live until DNS cut‚Äëover.
* Automated snapshots on RDS pre & post‚Äëmigration.
* Use EB blue/green deployments for zero‚Äëdowntime swap.
* Feature‚Äëflag any new code paths touching S3 or Redis.

---

## 10 ¬∑ Post‚ÄëMigration Hardening

* Enable RDS Multi‚ÄëAZ & backups.
* Add WAF to ALB, rate‚Äëlimit auth routes.
* Set up daily ECS/EB image scans.
* Expand synthetic monitoring (Pingdom) to global POPs.

---

## üìã Kan‚ÄëBan / Checklist

| Backlog ‚û°                 | In Progress ‚û°       | Code Review ‚û°          | Staging Ready ‚û°      | Prod Done            |
| ------------------------- | ------------------- | ---------------------- | -------------------- | -------------------- |
| ‚úÖ Create `migration` branch | ‚úÖ IaC VPC + RDS       | ‚úÖ VPC network design     | üöß Infrastructure verification | DNS cut‚Äëover         |
| ‚úÖ CDK stack deployment      | üöß Infrastructure verification | ‚úÖ Database configuration | üöß DB connectivity test | Remove Replit env    |
| üöß Database migration prep   | üöß Application integration | ‚úÖ S3 bucket setup    | ‚è≥ Application testing | Submit iOS build     |
| ‚úÖ Monorepo skeleton         | ‚úÖ Shared components setup | ‚úÖ Component migration | ‚è≥ Component testing | Submit Android build |
| ‚è≥ GitHub Actions pipeline   | üöß S3 upload refactor  | ‚è≥ Drizzle migration CI | ‚è≥ User UAT feedback    |                      |

*(‚úÖ = Completed, üöß = In Progress, ‚è≥ = Pending)*

---

### Updated Timeline

| Day  | Milestone                                 | Status      |
| ---- | ----------------------------------------- | ----------- |
| 0‚Äë1  | Branch + IaC skeleton                     | ‚úÖ Completed |
| 1‚Äë2  | CDK stack deployment and verification     | üöß In Progress |
| 3‚Äë4  | Database migration and application config | ‚è≥ Pending   |
| 5‚Äë6  | EB staging green, data migrated           | ‚è≥ Pending   |
| 7    | QA & load test                            | ‚è≥ Pending   |
| 8    | Prod cut‚Äëover                             | ‚è≥ Pending   |
| 9‚Äë14 | Mobile app bootstrap, TestFlight *alpha*  | ‚è≥ Pending   |

‚Äî End of Plan ‚Äî

## AWS Migration & Infrastructure Update (May 2025)

### Key Resource Names
- **VPC**: vpc-0bfbc6bce446d4ced (`stacktracker-vpc-v3`)
- **Public Subnets**: 
  - subnet-0a4c0264355eda44e (us-west-2a)
  - subnet-04b101642ee61aa20 (us-west-2b)
- **Migration RDS Instance**: `stacktracker-migration-db`
- **Migration Subnet Group**: `stacktracker-migration-subnet-group`
- **Parameter Group**: `stacktracker-migration-param-group`
- **Security Group**: sg-033417a7d86b9a062
- **PostgreSQL Version**: 17.5

### Migration Steps (Updated)
1. Create a new RDS instance (`stacktracker-migration-db`) in the public subnets using the above subnet group and parameter group, with PostgreSQL 17.5.
2. Allow your IP address in the security group (sg-033417a7d86b9a062) for port 5432.
3. Perform the migration using `pg_restore`.
4. **After migration is verified:**
   - Modify the RDS instance to use the private/isolated subnet group.
   - Remove your IP from the security group.
   - Set the RDS instance to not be publicly accessible.

### Security Reminder
- **IMPORTANT:** Publicly accessible RDS instances are at risk of attack. Only enable public access for the duration of the migration, and restrict access to your IP.
- After migration, always revert the RDS instance to private subnets and remove public access/security group rules.

### How to Revert Public Access
1. In the AWS Console or CLI, modify the RDS instance to use the private/isolated subnet group.
2. Set `PubliclyAccessible` to `false`.
3. Remove any security group rules allowing your public IP.
4. Verify that the database is only accessible from within the VPC (e.g., from EC2 or Elastic Beanstalk).
